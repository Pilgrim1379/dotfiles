;;; init-javascript.el --- Support for the Javascript language -*- lexical-binding: t -*-
;;; Commentary:
;;; Code:

;; JavaScript

;; ;; For my JavaScript configuration, I took my sources from the Nicolas Petton’s blog which I found very well explained.
;; ;; Setting up Emacs for JavaScript (part #1) Setting up Emacs for JavaScript (part #2)
;; ;; I like to use prettier to get my TypeScript code clean. To use it, don’t forget to install it with your package manager.
(use-package prettier-js
  :after (js2-mode)
  :hook (((js2-mode
           js2-imenu-extras-mode
           typescript-mode) . prettier-js-mode)))


;; rjsx-mode
(setq-default js-indent-level 2)

(use-package rjsx-mode
  :config
  (with-eval-after-load 'rjsx-mode
    (define-key rjsx-mode-map "<" nil)
    (define-key rjsx-mode-map (kbd "C-d") nil)
    (define-key rjsx-mode-map ">" nil))
  (js2-mode-hide-warnings-and-errors))

;; Typescript
(use-package typescript-mode
  :mode ("\\.ts\\'" "\\.tsx\\'"))


;; xref-js2
;; Makes it easy to jump to function references or definitions.
(use-package xref-js2 :defer)
;;

;; js2-refactor
;; Provides powerful refactoring based on the AST generated by js2-mode.
(use-package js2-refactor
  :bind (:map js2-mode-map
          ("C-k" . js2r-kill)
          ("M-." . nil))
  :hook ((rjsx-mode . js2-refactor-mode)
         (rjsx-mode . (lambda ()
                        (add-hook 'xref-backend-functions #'xref-js2-xref-backend nil t))))
  :init (setq js2r-add-keybindings-with-prefix "C-c C-r"))


;; JSON is used a lot, especially in the web. Therefore, it is important to have a decent configuration to feel comfortable when handling such files.
(use-package json-mode
  :mode "\\.json\\'")



(provide 'init-javascript)
;;; init-javascript.el ends here
